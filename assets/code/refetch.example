/* @flow */

import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { gql, graphql } from 'react-apollo';

import type { PostType } from '../types';

type Props = {
  post: PostType,
  deletePost: (postId: string | number) => Promise<*>,
  history: Object,
};

class Post extends Component {
  props: Props;
  render() {
    return (
      <Link
        className="bg-white ma3 box post flex flex-column no-underline br2"
        to={`/post/${this.props.post.id}`}
      >
        <div
          className="image"
          style={{
            backgroundImage: `url(${this.props.post.imageUrl})`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            paddingBottom: '100%',
          }}
        >
          <div
            className="delete ttu white pointer fw6 delete-small left-0 top-0 br2"
            onClick={this.handleDelete}
          >
            Delete
          </div>
        </div>
        <div className="flex items-center black-80 fw3 description">
          {this.props.post.description}
        </div>
      </Link>
    );
  }

  handleDelete = (e: SyntheticMouseEvent) => {
    e.preventDefault();
    this.props.deletePost(this.props.post.id);
  };
}

const deleteMutation = gql`
  mutation deletePost($id: ID!) {
    deletePost(id: $id) {
      id
    }
  }
`;
const FeedQuery = gql`query allPosts {
  allPosts(orderBy: createdAt_DESC) {
    id
    imageUrl
    description
  }
}`;

export default graphql(deleteMutation, {
  props: ({ ownProps, mutate }) => ({
    deletePost: postId =>
      mutate({
        variables: { id: postId },
        refetchQueries: [{ query: FeedQuery }],
      }),
  }),
})(Post);
